# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-08-09 13:32
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_dashboard.enums.BiogasPlant
import django_dashboard.enums.BiogasPlantContact
import django_dashboard.enums.Dashboard
import django_dashboard.enums.JobHistory
import django_dashboard.enums.UserDetail
import enumfields.fields
import multiselectfield.db.fields
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('continent', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('village', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('latitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AddressData',
            fields=[
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('id', models.IntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('continent', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('village', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('population', models.IntegerField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AggregatedStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AutoFault',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BiogasPlant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('UIC', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('biogas_plant_name', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('thingboard_ref', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('funding_souce', enumfields.fields.EnumField(blank=True, enum=django_dashboard.enums.BiogasPlant.FundingSourceEnum, max_length=1, null=True)),
                ('funding_source_notes', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('village', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('postcode', models.CharField(blank=True, max_length=20, null=True)),
                ('neighbourhood', models.CharField(blank=True, max_length=20, null=True)),
                ('other_address_details', models.TextField(blank=True, null=True)),
                ('type_biogas', enumfields.fields.EnumField(enum=django_dashboard.enums.BiogasPlant.TypeBiogas, max_length=1, null=True)),
                ('supplier', enumfields.fields.EnumField(blank=True, enum=django_dashboard.enums.BiogasPlant.SupplierBiogas, max_length=1, null=True)),
                ('volume_biogas', models.CharField(blank=True, max_length=200, null=True)),
                ('location_estimated', models.NullBooleanField(default=False)),
                ('QP_status', enumfields.fields.EnumField(enum=django_dashboard.enums.BiogasPlant.QPStatus, max_length=1, null=True)),
                ('sensor_status', enumfields.fields.EnumField(blank=True, enum=django_dashboard.enums.BiogasPlant.SensorStatus, max_length=1, null=True)),
                ('current_status', enumfields.fields.EnumField(enum=django_dashboard.enums.BiogasPlant.CurrentStatus, max_length=1, null=True)),
                ('verfied', models.NullBooleanField(db_index=True, default=False)),
                ('install_date', models.DateField(blank=True, null=True)),
                ('what3words', models.CharField(blank=True, max_length=200, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Biogas Plant',
                'verbose_name_plural': 'Biogas Plants',
                'permissions': (('remove_biogas', 'Remove a biogas plant from the platform'), ('create_biogas', 'Add a biogas plant to the platform'), ('edit_biogas', 'Edit a biogas plant profile'), ('edit_location_biogas', 'Able to edit a location associated with a biogas plant')),
            },
        ),
        migrations.CreateModel(
            name='BiogasPlantContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('contact_type', enumfields.fields.EnumField(enum=django_dashboard.enums.BiogasPlantContact.ContactType, max_length=1)),
                ('first_name', models.CharField(max_length=200, null=True)),
                ('surname', models.CharField(max_length=200, null=True)),
                ('mobile', models.CharField(blank=True, db_index=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, db_index=True, max_length=200, null=True, validators=[django.core.validators.EmailValidator])),
                ('country', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('continent', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('village', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('latitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='biogasplantcontact', to='django_dashboard.Address')),
            ],
            options={
                'verbose_name': 'Biogas Plant Owner',
                'verbose_name_plural': 'Biogas Plant Owners',
                'permissions': (('remove_user', 'Remove a user from the platform'), ('create_user', 'Add a user to the platform'), ('edit_user', "Edit a user's profile"), ('edit_mobile_number', 'Able to Edit a users mobile number')),
            },
        ),
        migrations.CreateModel(
            name='BiogasSensorStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('position', models.IntegerField(blank=True, default=0, null=True)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Card',
                'verbose_name_plural': 'Cards',
            },
        ),
        migrations.CreateModel(
            name='CardTemplate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('template_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=400, null=True)),
                ('card_type', enumfields.fields.EnumField(enum=django_dashboard.enums.Dashboard.CardTypes, max_length=1, null=True)),
                ('entity_type', enumfields.fields.EnumField(enum=django_dashboard.enums.Dashboard.EntityTypes, max_length=1, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='WidgetCards')),
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('company_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=200)),
                ('country', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('village', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('postcode', models.CharField(blank=True, max_length=20, null=True)),
                ('neighbourhood', models.CharField(blank=True, max_length=20, null=True)),
                ('other_address_details', models.TextField(blank=True, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True)),
                ('emails', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None)),
                ('other_info', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': "Company's",
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('plants', models.IntegerField(blank=True, null=True)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('faults', models.IntegerField(blank=True, null=True)),
                ('avtime', models.IntegerField(blank=True, null=True)),
                ('jobs', models.IntegerField(blank=True, null=True)),
                ('fixed', models.IntegerField(blank=True, null=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='django_dashboard.Company')),
            ],
            options={
                'verbose_name': 'Dashboard',
                'verbose_name_plural': 'Dashboard Data',
            },
        ),
        migrations.CreateModel(
            name='DataConnection',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IndicatorObjects',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('created', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
                ('biogas_plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicators', to='django_dashboard.BiogasPlant')),
            ],
        ),
        migrations.CreateModel(
            name='IndicatorsTemplate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('template_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('type_indicator', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=400, null=True)),
                ('description', models.TextField(blank=True, db_index=True, null=True)),
                ('units', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='WidgetCards')),
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IndictorJoinTable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('plant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_dashboard.BiogasPlant')),
            ],
        ),
        migrations.CreateModel(
            name='JobHistory',
            fields=[
                ('rejected_jobs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None)),
                ('job_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_flagged', models.DateTimeField(null=True)),
                ('date_accepted', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('date_completed', models.DateField(blank=True, null=True)),
                ('completed', models.NullBooleanField(db_index=True, default=False)),
                ('dispute_raised', models.NullBooleanField(default=False)),
                ('job_status', enumfields.fields.EnumField(enum=django_dashboard.enums.JobHistory.JobStatus, max_length=1, null=True)),
                ('verification_of_engagement', models.NullBooleanField(db_index=True, default=False)),
                ('fault_description', models.TextField(blank=True, null=True)),
                ('other', models.TextField(blank=True, null=True)),
                ('client_feedback_star', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('client_feedback_additional', models.TextField(blank=True, null=True)),
                ('overdue_for_acceptance', models.NullBooleanField(default=False)),
                ('priority', models.NullBooleanField(default=False)),
                ('fault_class', models.CharField(blank=True, choices=[('MINOR', 'minor'), ('MAJOR', 'major')], max_length=225, null=True)),
                ('assistance', models.NullBooleanField(default=False)),
                ('description_help_need', models.TextField(blank=True, null=True)),
                ('reason_abandoning_job', models.TextField(blank=True, null=True)),
            ],
            options={
                'get_latest_by': ['-priority', '-date_flagged'],
                'verbose_name': 'Job History',
                'verbose_name_plural': 'Job History',
                'permissions': (('remove_job', 'Remove a job from the platform'), ('create_job', 'Add a job to the platform'), ('edit_job', 'Edit a job profile'), ('edit_job_status', 'Able to edit a job status')),
            },
        ),
        migrations.CreateModel(
            name='LowGasPressure',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, help_text='If 0 gas pressure is low 10 means all is ok, in between is defined by internal logic', null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('join_table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='low_gas_pressure', to='django_dashboard.IndictorJoinTable')),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, null=True)),
                ('message_type', models.CharField(blank=True, db_index=True, max_length=30, null=True)),
                ('message_id', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('message_from_num', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True)),
                ('message_to_num', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True)),
                ('message_from_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('message_to_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('related_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_dashboard.JobHistory')),
                ('user_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_from', to=settings.AUTH_USER_MODEL)),
                ('user_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_to', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reset_code', models.CharField(blank=True, editable=False, max_length=200, null=True)),
                ('expiry_datetime', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PendingAction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_complete', models.BooleanField(db_index=True, default=False)),
                ('entity_type', enumfields.fields.EnumField(enum=django_dashboard.enums.Dashboard.EntityTypes, max_length=2, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('alert_type', enumfields.fields.EnumField(enum=django_dashboard.enums.Dashboard.AlertTypes, max_length=2, null=True)),
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
                ('entity_id', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('action_url', models.CharField(blank=True, db_index=True, max_length=600, null=True)),
                ('action_object', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pending_actions', to='django_dashboard.Card')),
            ],
        ),
        migrations.CreateModel(
            name='PendingJobs',
            fields=[
                ('job_id', models.CharField(blank=True, db_index=True, default=uuid.uuid4, max_length=200, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('job_details', models.TextField(blank=True, null=True)),
                ('accepted', models.NullBooleanField(db_index=True, default=None)),
                ('technicians_rejected', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None)),
                ('biogas_plant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abiogasplant', to='django_dashboard.BiogasPlant')),
            ],
            options={
                'verbose_name': 'Pending Job',
                'verbose_name_plural': 'Pending Jobs',
            },
        ),
        migrations.CreateModel(
            name='RegisteredNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UIC', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('channel', models.IntegerField(blank=True, db_index=True, null=True)),
                ('band', models.IntegerField(blank=True, db_index=True, null=True)),
                ('mode', models.IntegerField(blank=True, db_index=True, null=True)),
                ('nw_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
            ],
            options={
                'permissions': (('can_register_node', 'has permission to register a new node on the system'),),
            },
        ),
        migrations.CreateModel(
            name='TechnicianDetail',
            fields=[
                ('technician_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('acredit_to_install', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('TUBULAR', 'tubular'), ('FIXED_DOME', 'fixed_dome')], db_index=True, max_length=18, null=True)),
                ('acredited_to_fix', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('TUBULAR', 'tubular'), ('FIXED_DOME', 'fixed_dome')], db_index=True, max_length=18, null=True)),
                ('specialist_skills', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('PLUMBER', 'plumber'), ('MASON', 'mason'), ('MANAGER', 'manager'), ('DESIGN', 'design'), ('CALCULATIONS', 'calculations')], db_index=True, max_length=41, null=True)),
                ('number_jobs_active', models.IntegerField(blank=True, null=True)),
                ('number_of_jobs_completed', models.IntegerField(blank=True, null=True)),
                ('status', models.NullBooleanField(choices=[(True, 'Active'), (False, 'Inactive')], db_index=True)),
                ('what3words', models.CharField(blank=True, max_length=200, null=True)),
                ('willing_to_travel', models.IntegerField(blank=True, null=True)),
                ('average_rating', models.FloatField(blank=True, default=0, editable=False, null=True)),
                ('max_num_jobs_allowed', models.IntegerField(blank=True, default=1, null=True)),
                ('languages_spoken', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None)),
                ('latitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                ('srid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Status and Location',
                'verbose_name_plural': 'Status and Location',
                'permissions': (('remove_technician', 'Remove a technician from the platform'), ('create_technician', 'Add a technician to the platform'), ('edit_technician', "Edit a technican's profile")),
            },
        ),
        migrations.CreateModel(
            name='Thresholds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='TrendChangeDetectionPDecrease',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('join_table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trend_detection_p_decrease', to='django_dashboard.IndictorJoinTable')),
            ],
        ),
        migrations.CreateModel(
            name='TrendChangeDetectionPIncrease',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('join_table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trend_detection_p_increase', to='django_dashboard.IndictorJoinTable')),
            ],
        ),
        migrations.CreateModel(
            name='UICtoDeviceID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UIC', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('device_id', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('biogas_plant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='UIC_to_Device_id', to='django_dashboard.BiogasPlant')),
            ],
        ),
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', enumfields.fields.EnumField(enum=django_dashboard.enums.UserDetail.UserRole, max_length=1, null=True)),
                ('first_name', models.CharField(default=None, editable=False, max_length=200)),
                ('last_name', models.CharField(default=None, editable=False, max_length=200)),
                ('user_photo', models.ImageField(blank=True, null=True, upload_to='UserPhotos')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('country', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('region', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('village', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('neighbourhood', models.CharField(blank=True, max_length=20, null=True)),
                ('postcode', models.CharField(blank=True, max_length=20, null=True)),
                ('other_address_details', models.TextField(blank=True, null=True)),
                ('datetime_created', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('datetime_modified', models.DateTimeField(blank=True, editable=False, null=True)),
                ('company', models.ManyToManyField(to='django_dashboard.Company')),
                ('logged_in_as', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_as', to='django_dashboard.Company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='userdetail', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserDetail',
                'verbose_name_plural': 'UserDetails',
                'permissions': (('remove_user', 'Remove a user from the platform'), ('create_user', 'Add a user to the platform'), ('edit_user', "Edit a user's profile")),
            },
        ),
        migrations.CreateModel(
            name='UtilisationStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_index=True, null=True)),
                ('info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('join_table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='utilisation', to='django_dashboard.IndictorJoinTable')),
            ],
        ),
        migrations.AddField(
            model_name='techniciandetail',
            name='technicians',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='technician_details', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='pendingjobs',
            name='technician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='atechician', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='jobhistory',
            name='accepted_but_did_not_visit',
            field=models.ManyToManyField(blank=True, related_name='acceptednovisit', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='jobhistory',
            name='fixers',
            field=models.ManyToManyField(blank=True, related_name='fixerss', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='jobhistory',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_dashboard.BiogasPlant'),
        ),
        migrations.AddField(
            model_name='jobhistory',
            name='rejected_job',
            field=models.ManyToManyField(blank=True, related_name='rejectedjob', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='indicatorobjects',
            name='indicator_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='indicator_objects', to='django_dashboard.IndicatorsTemplate'),
        ),
        migrations.AddField(
            model_name='dataconnection',
            name='join_table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_connection', to='django_dashboard.IndictorJoinTable'),
        ),
        migrations.AddField(
            model_name='cardtemplate',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_dashboard.Company'),
        ),
        migrations.AddField(
            model_name='card',
            name='card_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='django_dashboard.CardTemplate'),
        ),
        migrations.AddField(
            model_name='card',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='card_user', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='biogassensorstatus',
            name='join_table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='biogas_sensor_status', to='django_dashboard.IndictorJoinTable'),
        ),
        migrations.AddField(
            model_name='biogasplantcontact',
            name='associated_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_dashboard.Company'),
        ),
        migrations.AddField(
            model_name='biogasplant',
            name='associated_company',
            field=models.ManyToManyField(blank=True, related_name='biogas_plant_company', to='django_dashboard.Company'),
        ),
        migrations.AddField(
            model_name='biogasplant',
            name='constructing_technicians',
            field=models.ManyToManyField(blank=True, related_name='constructing_technicians', to='django_dashboard.UserDetail'),
        ),
        migrations.AddField(
            model_name='biogasplant',
            name='contact',
            field=models.ManyToManyField(related_name='biogas_plant_detail', to='django_dashboard.BiogasPlantContact'),
        ),
        migrations.AddField(
            model_name='autofault',
            name='join_table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auto_fault', to='django_dashboard.IndictorJoinTable'),
        ),
    ]
